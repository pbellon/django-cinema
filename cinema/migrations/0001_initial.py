# Generated by Django 5.2.5 on 2025-08-20 14:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('imdb_id', models.CharField(blank=True, max_length=150)),
                ('birth_day', models.DateField(blank=True, null=True)),
                ('death_day', models.DateField(blank=True, null=True)),
                ('biography', models.TextField(blank=True)),
                ('last_tmdb_populated', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
            },
            bases=('cinema.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Spectator',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('biography', models.TextField(blank=True)),
                ('avatar', models.FileField(blank=True, upload_to='')),
            ],
            options={
                'verbose_name': 'Spectator',
                'verbose_name_plural': 'Spectators',
            },
            bases=('cinema.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('imdb_id', models.CharField(blank=True, max_length=150)),
                ('description', models.TextField(blank=True)),
                ('original_title', models.CharField(blank=True, max_length=300)),
                ('evaluation', models.IntegerField(choices=[(0, 'Not Rated'), (1, 'Very Bad'), (2, 'Bad'), (3, 'Medium'), (4, 'Good'), (5, 'Very Good')], default=0)),
                ('status', models.CharField(choices=[('Unknown', 'Unknown'), ('Rumored', 'Rumored'), ('In Production', 'In Production'), ('Post Production', 'Post Production'), ('Released', 'Released'), ('Canceled', 'Canceled')], default='Unknown', max_length=15)),
                ('budget', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0, message="Budget can't be negative")])),
                ('release_date', models.DateField(blank=True, null=True)),
                ('authors', models.ManyToManyField(related_name='movies', to='cinema.author')),
            ],
        ),
        migrations.CreateModel(
            name='SpectatorMovieEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(help_text='Evaluation score', validators=[django.core.validators.MinValueValidator(limit_value=0, message='Score must be superior or equal to 0'), django.core.validators.MaxValueValidator(limit_value=100, message='Score must be inferior or equal to 100')])),
                ('comment', models.TextField(blank=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='cinema.movie')),
                ('spectator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movies_evaluations', to='cinema.spectator')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpectatorFavoriteMovie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.movie')),
                ('spectator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_movies', to='cinema.spectator')),
            ],
        ),
        migrations.CreateModel(
            name='SpectatorFavoriteAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.author')),
                ('spectator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_authors', to='cinema.spectator')),
            ],
        ),
        migrations.CreateModel(
            name='SpectatorAuthorEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(help_text='Evaluation score', validators=[django.core.validators.MinValueValidator(limit_value=0, message='Score must be superior or equal to 0'), django.core.validators.MaxValueValidator(limit_value=100, message='Score must be inferior or equal to 100')])),
                ('comment', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='cinema.author')),
                ('spectator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors_evaluations', to='cinema.spectator')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
